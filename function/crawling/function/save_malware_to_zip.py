import requests
import time
import json
import os
from .save_json import SaveJson
from .remove_csv import RemoveCsv

# malware bazaar에서 zip파일 다운로드 (크롤링)
def SaveMalwareToZip(filename, dir_save_path, csv_path, json_path):
    headers = {'API-KEY': 'test112'}
    file_data = {'query': 'get_file', 'sha256_hash': filename}
    tag_data = {'query': 'get_info', 'hash': filename}

    download_path = os.path.join(dir_save_path, "zip_file")

    # 크롤링 : API 요청
    try:
        response_file = requests.post('https://mb-api.abuse.ch/api/v1/', data=file_data, headers=headers, timeout=200)
        time.sleep(0.1)
        response_tag = requests.post('https://mb-api.abuse.ch/api/v1/', data=tag_data, headers=headers, timeout=200)
        time.sleep(0.1)
    except requests.exceptions.Timeout:
        print("크롤링 요청이 시간 초과되었습니다.")
        pass
    except requests.exceptions.RequestException as e:
        print(f"크롤링 요청 중 오류 발생: {e}")
        pass

    # 두 크롤링 모두 성공 시
    try:
        if response_file.status_code == 200 and response_tag.status_code == 200:
            file_path = os.path.join(download_path, f"{filename}.zip")
            try:
                tag_data = json.loads(response_tag.content.decode('utf-8'))
                tags = tag_data['data'][0]['tags']

                with open(file_path, "wb") as file:
                    file.write(response_file.content) 
                print(f"파일이 {filename}.zip 으로 저장되었습니다.")

                tag_info = {
                    "file_name": filename,
                    "tags": tags
                }

                SaveJson(json_path, tag_info)            

                RemoveCsv(filename, csv_path)            

            except Exception as e:
                if os.path.exists(file_path):
                    os.remove(file_path)
                print(f"파일 저장 오류 : {e}")
                pass
        else:
            print(f"크롤링 요청 실패")
            print(f"{response_file}")
    except Exception as e:
        print(f"저장 오류: {e}")
        pass


 